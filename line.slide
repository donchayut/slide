go 101

14:03 20 Mar 2018
Tags: golang

Pallat Anchaleechamaikorn
Technical Coach @ Tech Inno
golang developer

yod.pallat@gmail.com
https://github.com/pallat

* Docker written in go
.background Go-Presentation-Theme.png
.image docker.png
.image gopher.png

* What should you know
.background Go-Presentation-Theme.png
.link https://tour.golang.org
.link https://www.facebook.com/groups/584867114995854/ Golang Thailand

* Installing
.background Go-Presentation-Theme.png
.link https://golang.org

*mac/linux*
Download file.tar.gz

    ~/goroot

*windows*
Download file.zip

    C:\go


* GOROOT
.background Go-Presentation-Theme.png

*mac/linux*

    export GOROOT=~/goroot
    export GOBIN=$GOPATH/bin
    export PATH=$GOBIN:$GOROOT/bin:$PATH

*windows*

    set GOROOT=C:\go
    set GOBIN=%GOPATH%\bin
    set PATH=%GOBIN%;%GOROOT%\bin;%PATH%


* GOROOT vs GOPATH
.background Go-Presentation-Theme.png

*GOROOT* is golang sdk
*GOPATH* for projects & third-party libraries

* Project structure
.background Go-Presentation-Theme.png

    bin/
        hello                          # command executable
        outyet                         # command executable
    pkg/
        linux_amd64/
            github.com/golang/example/
                stringutil.a           # package object
    src/
        github.com/golang/example/
            .git/                      # Git repository metadata
        hello/
            hello.go               # command source
        outyet/
            main.go                # command source
            main_test.go           # test source
        stringutil/
            reverse.go             # package source
            reverse_test.go        # test source
        golang.org/x/image/
            .git/                      # Git repository metadata
        bmp/
            reader.go              # package source
            writer.go              # package source
        ... (many more repositories and packages omitted) ...

* editor
.background Go-Presentation-Theme.png
.image editor.png

* editor
.background Go-Presentation-Theme.png
.image editor2016-2017.png 300 _

* os
.background Go-Presentation-Theme.png
.image dev_on_os.png

* Keywords
.background Go-Presentation-Theme.png

    break        default      func         interface    select
    case         defer        go           map          struct
    chan         else         goto         package      switch
    const        fallthrough  if           range        type
    continue     for          import       return       var


* Package

.background Go-Presentation-Theme.png
- every *.go* file must have *package* keyword on top
- package name should same with directory name
- any directories can only have one package, except plus _test in it
such as

    package demo
    package demo_test 

* Function
.background Go-Presentation-Theme.png

    func abs(m float64) float64 {
        f := float64(m)
        if f < 0 {
            return -f
        }
        return f
    }

* Function

.background Go-Presentation-Theme.png
- func main
- func init

* Function supports

.background Go-Presentation-Theme.png
- anonymous functions
- closures functions
- first-class functions
- variadic functions

* Anonymous Function
.background Go-Presentation-Theme.png
.play func_anonymous.go

* Closure Function
.background Go-Presentation-Theme.png
.play func_closure.go

* Closure Function
.background Go-Presentation-Theme.png
.play func_closure_more.go

* First-Class Function
.background Go-Presentation-Theme.png
.play func_firstclass.go

* idiom
.background Go-Presentation-Theme.png

*Good name*

    short, concise, evocative
    not be unique across all source code
    src/encoding/base64 is imported as "encoding/base64" but has name base64,
    not encoding_base64 and not encodingBase64

    (Don't use the import . notation, which can simplify tests that must 
    run outside the package they are testing, but should otherwise be avoided.)
    Ex: NewRing

* idiom
.background Go-Presentation-Theme.png

*getter*

    Go doesn't provide automatic support for getters and setters.
    There's nothing wrong with providing getters and setters yourself,
    and it's often appropriate to do so, but it's neither idiomatic 
    nor necessary to put Get into the getter's name.
    If you have a field called owner (lower case, unexported), 
    the getter method should be called Owner (upper case, exported), not GetOwner.
    The use of upper-case names for export provides the hook to discriminate the field from the method. 
    A setter function, if needed, will likely be called SetOwner. 
    Both names read well in practice:


    owner := obj.Owner()
    if owner != user {
            obj.SetOwner(user)
    }

* Variable
.background Go-Presentation-Theme.png

    var c, python, java bool

    var i, j int = 1, 2

    var c, python, java = true, false, "no!"

    c, python, java := true, false, "no!"

* Type
.background Go-Presentation-Theme.png

basic type

    bool

    string

    int  int8  int16  int32  int64

    uint uint8 uint16 uint32 uint64 uintptr

    byte  // alias for uint8

    rune  // alias for int32
          // represents a Unicode code point

    float32 float64

    complex64 complex128

* Alias Type
.background Go-Presentation-Theme.png

    type alias = T

.play type_alias.go

* Custom Type
.background Go-Presentation-Theme.png

    type newType T

.play type_custom_primitive.go

* Custom Type
.background Go-Presentation-Theme.png

    type newType T

.play type_custom_func.go

* Zero Value

.background Go-Presentation-Theme.png

- *0*  _for_ _numeric_ _types_
- *false* _for_ _the_ _boolean_ _type_
- *""* (the empty string) for strings

* const

.background Go-Presentation-Theme.png
iota

    iota expression is repeated by the other constants 
    until another assignment or type declaration shows up.

* for

.background Go-Presentation-Theme.png

    for init; condition; post { }

    for ;condition; { }

    for condition { }

    for { }

* for is for

.background Go-Presentation-Theme.png
.play for_for.go

* while is for

.background Go-Presentation-Theme.png
.play for_while.go

* for multiple Value

.background Go-Presentation-Theme.png
.play for_multiple.go

* if

.background Go-Presentation-Theme.png

    func sqrt(x float64) string {
        if x < 0 {
            return sqrt(-x) + "i"
        }
        return fmt.Sprint(math.Sqrt(x))
    }

if {}
if {} else {}
if {} else if {} else {}

* if statement; condition {}

.background Go-Presentation-Theme.png

    func pow(x, n, lim float64) float64 {
        if v := math.Pow(x, n); v < lim {
            return v
        }
        return lim
    }

* array

.background Go-Presentation-Theme.png

The type [n]T

.play array.go

* slice []T

.background Go-Presentation-Theme.png
    References to arrays
    Zero value is nil
    cap() number of elements in the underlying array
    len() number of elements it contains
    make([]T,len,cap)
    append
    Range
    [:]

.link https://tour.golang.org/moretypes/18 exercise

* map map[T]T

.background Go-Presentation-Theme.png

    Zero value is nil
    len() number of elements it contains
    make(map[T]T)
    delete(m, key)
    Range
    Not guaranty sort


When iterating over a map with a range loop,
the iteration order is *not* *specified*
and is *not* *guaranteed* to be the same from one iteration to the next.

* defer

.background Go-Presentation-Theme.png
.play defer_simple.go

* defer

defer is stack

.background Go-Presentation-Theme.png
.play defer_stack.go

* defer
.background Go-Presentation-Theme.png
.play defer_func.go

* defer
.background Go-Presentation-Theme.png
.play defer_anonymous.go

* defer
.background Go-Presentation-Theme.png
.play defer_panic.go


* struct

.background Go-Presentation-Theme.png
.play struct.go

* struct
.background Go-Presentation-Theme.png
represents json
.play struct_json.go /^func main/,/END OMIT/

* struct
.background Go-Presentation-Theme.png
represents xml
.play struct_xml.go /^func main/,/END OMIT/


* method

.background Go-Presentation-Theme.png
.play struct_func.go

* method

.background Go-Presentation-Theme.png
.play struct_method.go


* interface

.background Go-Presentation-Theme.png

empty interface
.play interface_empty.go

* interface: type assertion

.background Go-Presentation-Theme.png

.play interface_assert.go

* interface: type switch

.background Go-Presentation-Theme.png
.play interface_switch.go

* interface 

.background Go-Presentation-Theme.png

To define a set of method signatures

    Interfaces specify behaviors. 
    An interface type defines a set 
    of methods:


    type areaer interface {
        area() int
    }


`Interfaces` `are` `implemented` `implicitly`


* interface: Stringer

.background Go-Presentation-Theme.png

    type Stringer interface {
        String() string
    }

* interface: error

.background Go-Presentation-Theme.png

    type error interface {
        Error() string
    }

* goroutine

.background Go-Presentation-Theme.png

* channel

.background Go-Presentation-Theme.png

